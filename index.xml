<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Recent Content on Engineer&#39;s Draft </title>
      <generator uri="https://hugo.spf13.com">Hugo</generator>
    <link>http://yujinqiu.github.io/index.xml/</link>
    
    
    
    <updated>Sun, 23 Nov 2014 11:47:25 CST</updated>
    
    <item>
      <title>SSHDraft</title>
      <link>http://yujinqiu.github.io/posts/SSHDraft/</link>
      <pubDate>Sun, 23 Nov 2014 11:47:25 CST</pubDate>
      
      <guid>http://yujinqiu.github.io/posts/SSHDraft/</guid>
      <description>

&lt;h2 id=&#34;toc_0&#34;&gt;Black Magic Of SSH&lt;/h2&gt;

&lt;h3 id=&#34;toc_1&#34;&gt;绑定本地端口&lt;/h3&gt;

&lt;p&gt;ssh 通过加密传输数据, 特别适合**国情, 加入我们要让8080 端口的数据, 全部通过 SSH  加密转发到远程主机上&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ssh  -D 8080 user@host
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;toc_2&#34;&gt;应用场景&lt;/h4&gt;

&lt;p&gt;在咖啡厅等公共场所, 为了上网安全, 可以使用 ssh动态转发来保证安全.&lt;/p&gt;

&lt;h3 id=&#34;toc_3&#34;&gt;本地端口转发( Local Port Forwarding)&lt;/h3&gt;

&lt;h4 id=&#34;toc_4&#34;&gt;背景&lt;/h4&gt;

&lt;p&gt;公司从安全性上考虑, 通常会隔离网络, 不允许直接访问, 简单拓扑如下:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;          host2
host1 --&amp;gt;  X  --&amp;gt; host3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;host1 无法直接访问 host3, host1 可以访问 host2, host2 可以访问 host3.&lt;br /&gt;
可以通过 ssh 的 &lt;strong&gt;本地端口转发&lt;/strong&gt; 来进行&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ssh -L 2121:host3:21 user@host2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;本地端口转发&lt;/strong&gt; 三个参数值表示:  本机绑定端口:目标主机:目标主机端口,  其中&lt;strong&gt;本机绑定端口&lt;/strong&gt;意思是会在本机启动一个&lt;strong&gt;本地监听的端口&lt;/strong&gt;.&lt;br /&gt;
上面的命令实现的效果就是, 我们只要连接上 host1的2121 端口, 就等于连接上了 host2的21端口.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ftp localhost:2121
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;本地端口转发&lt;/strong&gt; 让 host1 和 host2 直接形成 &lt;strong&gt;SSH 隧道&lt;/strong&gt;&lt;br /&gt;
注意其中&lt;strong&gt;目标主机&lt;/strong&gt;的机器名或者 ip 是香港 host3 而言的.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ssh -L 5900:localhost:5900  host2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;表示将本机的5900端口绑定到 host3的5900 端口. localhost 是想对 host2 而言.&lt;/p&gt;

&lt;p&gt;本地端口转发的意思是:  绑定本地机器端口, 进行数据转发.&lt;/p&gt;

&lt;h3 id=&#34;toc_5&#34;&gt;远程端口转发(Remote Port Forwarding)&lt;/h3&gt;

&lt;p&gt;远程端口转发: 对应就是 绑定远程机器端口, 进行数据转发.&lt;/p&gt;

&lt;h4 id=&#34;toc_6&#34;&gt;背景&lt;/h4&gt;

&lt;p&gt;公司又从安全性上考虑, host2 通过 NAT 出去可以访问 host1,  host1 机器无法访问 host2, 同时 host2 和 host3 机器间能够相互访问.   我们希望能够 host1 直接访问 host3&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;host1 &amp;lt;- host2
       |     |
       X     |
       |     |
       +---host3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;解决的办法是:   既然 host2 可以连接 host1, 那么就从 host2上建立也 host1的连接, 然后在 host1上使用这个连接即可.&lt;br /&gt;
在 host2上执行&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    ssh -R  2121:host3:21 host1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;远程端口转发三个参数含义:  远程机器绑定端口: 目标主机:目标主机(Listen) 端口. 上面命令的意思是: 让 host1监听自己的2121 端口, 然后将所有的数据, 从 host2 转发到 host3 的21端口.&lt;br /&gt;
绑定之后, 可以在 host1 上直连 host3.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ftp localhost:2121
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;toc_7&#34;&gt;注意点&lt;/h5&gt;

&lt;ol&gt;
&lt;li&gt;2121 远程机器端口会在 ssh 运行之后, 自动在 host1 机器上启动.&lt;/li&gt;
&lt;li&gt;localhost 是针对host2 而言. 对比 Local 和 Remote 本质上 &lt;strong&gt;localhost&lt;/strong&gt; 是针对 proxy 角色而言的,  在 local forwarding proxy 是:  host2,  remote 的 proxy 也是 host2&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&#34;toc_8&#34;&gt;典型应用场景&lt;/h4&gt;

&lt;p&gt;你在本机上开发了一个 web (9000端口) , 然后你想向你的朋友演示, 但是你没有外网 ip, 所有不可能直接访问.&lt;br /&gt;
幸运的是你有一个外网可以访问的 VPS(3000端口), 这时候的解决方案是:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    ssh -R 3000:loclhost:9000 user@vps
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;默认情况下, ssh 是不会允许远程机器来进行端口转发.  需要在 &lt;strong&gt;host1&lt;/strong&gt;上增加一行配置,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    vim /etc/ssh/sshd_config
    GatewayPorts yes
    sudo service ssh restart 
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;toc_9&#34;&gt;SSH 有用参数&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;-N Do not execute a remote command.  This is useful for just forwarding
         ports (protocol version 2 only).
-T 不为这个连接分配 TTY
-f      Requests ssh to go to background just before command execution.  This
         is useful if ssh is going to ask for passwords or passphrases, but
         the user wants it in the background.
         表示SSH连接成功后，转入后台运行。这样一来，你就可以在不中断SSH连接的情况下，在本地shell中执行其他操作。

-g      Allows remote hosts to connect to local forwarded ports. 

-n      Redirects stdin from /dev/null (actually, prevents reading from stdin).  This must be used when ssh is run in the background.  A common trick
         is to use this to run X11 programs on a remote machine.  For example, ssh -n shadows.cs.hut.fi emacs &amp;amp; will start an emacs on shad-
         ows.cs.hut.fi, and the X11 connection will be automatically forwarded over an encrypted channel.  The ssh program will be put in the back-
         ground.  (This does not work if ssh needs to ask for a password or passphrase; see also the -f option.)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;比较常见选项组合:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;-nNT
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;toc_10&#34;&gt;Reference&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;http://blog.trackets.com/2014/05/17/ssh-tunnel-local-and-remote-port-forwarding-explained-with-examples.html&#34;&gt;SSH Tunnel - Local and Remote Port Forwarding Explained With Examples&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>fileserver</title>
      <link>http://yujinqiu.github.io/posts/fileserver/</link>
      <pubDate>Sun, 23 Nov 2014 10:43:43 CST</pubDate>
      
      <guid>http://yujinqiu.github.io/posts/fileserver/</guid>
      <description>

&lt;h1 id=&#34;toc_0&#34;&gt;文件服务器&lt;/h1&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;背景&lt;/h2&gt;

&lt;p&gt;我们经常需要下载远程的一台服务器的一个文件, 比如临时线上的某台服务器的一个日志文件需要下载到本地 windows, 没有办法使用 scp, 搭建一个 ftp 又太费劲.&lt;/p&gt;

&lt;h3 id=&#34;toc_2&#34;&gt;解决方案&lt;/h3&gt;

&lt;h4 id=&#34;toc_3&#34;&gt;python&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;python -m SimpleHTTPServer 8080
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;优点是: 简单 缺点是: 可定制性差.  可能你中间经过代理转发, 需要通过特殊的前缀来区分.&lt;/p&gt;

&lt;h4 id=&#34;toc_4&#34;&gt;golang&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;pakcage main

import (
    &amp;quot;net/http&amp;quot;
    &amp;quot;log&amp;quot;
)

func main () {
    fileHander := http.FileServer(http.Dir(&amp;quot;/tmp&amp;quot;))
    log.Fatal(http.Handle(&amp;quot;/tmpfiles/&amp;quot;, http.StripPrefix(&amp;quot;/tmpfiles/&amp;quot;, fileHandler))))
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>CliDraft</title>
      <link>http://yujinqiu.github.io/posts/CliDraft/</link>
      <pubDate>Wed, 19 Nov 2014 21:36:12 CST</pubDate>
      
      <guid>http://yujinqiu.github.io/posts/CliDraft/</guid>
      <description>

&lt;h2 id=&#34;toc_0&#34;&gt;命令行控&lt;/h2&gt;

&lt;h3 id=&#34;toc_1&#34;&gt;ubuntu (命令行)&lt;/h3&gt;

&lt;h4 id=&#34;toc_2&#34;&gt;moc(music on console)&lt;/h4&gt;

&lt;p&gt;安装命令 &lt;code&gt;sudo apt-get -y install  moc&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&#34;toc_3&#34;&gt;特点&lt;/h4&gt;

&lt;p&gt;mod 很类似 tmux 能够attach(输入命令&lt;code&gt;mocp&lt;/code&gt;) 和 detach(&lt;code&gt;q&lt;/code&gt;)&lt;/p&gt;

&lt;p&gt;特点:&lt;br /&gt;
1. &amp;gt;  音量increase  &amp;lt; 音量 decrease&lt;br /&gt;
2. &lt;code&gt;h&lt;/code&gt; for help&lt;br /&gt;
3. &lt;code&gt;Q&lt;/code&gt; for quit&lt;/p&gt;

&lt;h3 id=&#34;toc_4&#34;&gt;MAC&lt;/h3&gt;

&lt;h4 id=&#34;toc_5&#34;&gt;afplay(Audio File Play)&lt;/h4&gt;

&lt;p&gt;很简单的命令, 帮助文档就一个选项&lt;code&gt;-h&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{-t | --time} TIME  
    play for TIME seconds
{-r | --rate} RATE
    play at playback rate
{-q | --rQuality} QUALITY
    set the quality used for rate-scaled playback (default is 0 - low quality, 1 - high quality)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;toc_6&#34;&gt;简单流式计算&lt;/h3&gt;

&lt;h4 id=&#34;toc_7&#34;&gt;背景&lt;/h4&gt;

&lt;p&gt;经常我们在追查线上问题的时候, 希望能够对线上的日志进行实时的统计输出?&lt;br /&gt;
假设线上的日志文件名为a.log 格式为&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;NOTICE: 09-27 09:51:00: abc  
NOTICE: 09-27 09:51:00: cde  
NOTICE: 09-27 09:51:01: fgh  
NOTICE: 09-27 09:51:01: ijk  
NOTICE: 09-27 09:51:03: lmn  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我们希望实时统计输出每秒的日志数目.&lt;/p&gt;

&lt;h4 id=&#34;toc_8&#34;&gt;解决命令&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;tail -f a.log | cut -c 0-22 | uniq -c 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;输出结果类似如下:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;271 NOTICE: 09-27 09:59:54
309 NOTICE: 09-27 09:59:55
306 NOTICE: 09-27 09:59:56:
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;toc_9&#34;&gt;文件分割&lt;/h3&gt;

&lt;h4 id=&#34;toc_10&#34;&gt;背景&lt;/h4&gt;

&lt;p&gt;通常我们为了加快处理速度, 会对数据文件进行拆分, 然后同时运行多份相同的程序 load 不同的数据文件进行简单的并行处理. &lt;strong&gt;比较有用的拆分是根据文件的行数进行&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&#34;toc_11&#34;&gt;解决命令&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;split [OPTION]... [INPUT [PREFIX]]

split -l 100 -d -a 2 DATA  PREFIX_
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;toc_12&#34;&gt;常用选项&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;-l 按照行数拆分
-d 拆分文件后缀以数字进行, 默认是字母
-a NUM  拆分文件后缀名的长度, 默认2
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;toc_13&#34;&gt;screen 非交互运行&lt;/h3&gt;

&lt;h4 id=&#34;toc_14&#34;&gt;背景&lt;/h4&gt;

&lt;p&gt;有时候我们为了批量后台执行一些程序, 同时避免退出之后, 不会被杀伤, 会采用 screen, nohup等手段. 其中 screen 默认情况下是 ** attach ** 模式, 需要 &lt;code&gt;ctrl + a , d&lt;/code&gt; 之后才可以 ** detach ** 出来, 其实是可以直接以 detach 模式后台运行的.&lt;/p&gt;

&lt;h3 id=&#34;toc_15&#34;&gt;解决命令&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;    screen -d -m -S NAME  sleep 10 
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;toc_16&#34;&gt;缺点&lt;/h3&gt;

&lt;p&gt;程序执行退出之后, session 会自动消失, 建议输出写入到日志中.&lt;/p&gt;

&lt;h3 id=&#34;toc_17&#34;&gt;autojump&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;有了 autojump 妈妈再也不用当心我手指痛了.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;看了网上很多关于 autojump 的文章发现大部分都太过时了, 决定自己写一篇.&lt;/p&gt;

&lt;h4 id=&#34;toc_18&#34;&gt;背景&lt;/h4&gt;

&lt;p&gt;作为运维人员是不是经常各种 cd, 时间久了感觉手指心都觉得有点痛, 这时候你想要 autojump 来帮你解决这个问题.
&amp;gt; autojump - a faster way to navigate your filesystem&lt;/p&gt;

&lt;h4 id=&#34;toc_19&#34;&gt;应用场景&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;快速进入一个目录,autojump 会记录和计算各个目录权重, 通过 &lt;code&gt;j --stat&lt;/code&gt; 来查看&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;j foo
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;快速进入当前目录下的一个子目录&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;jc images
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;直接用文件管理器( mac os x Finder)打开对应目录&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;jo images
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;支持用文件管理( mac os x Finder)进入当前目录的子目录&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;jco images
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&#34;toc_20&#34;&gt;常用选项&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;-s, &amp;ndash;stat 查看前100条目录的权重&lt;/li&gt;
&lt;li&gt;-i, &amp;ndash;increase VALUE 增加当前目录的权重, 可以制定自己增加权重VALUE多少.&lt;/li&gt;
&lt;li&gt;-d, &amp;ndash;decreate VALUE 减少当前目录的权重, 可以制定自己减少权重VALUE 多少.&lt;/li&gt;
&lt;li&gt;&amp;ndash;purge 删除一些目录已经被删除但是仍然保留在数据库中.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&#34;toc_21&#34;&gt;高级功能&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;ZSH 支持 Tab 补全&lt;br /&gt;
autojump ZSH 需要&lt;strong&gt;compinit&lt;/strong&gt;模块来支持, 配置方法:把下面内容加入 ~/.zshrc&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    autoload -U compinit &amp;amp;&amp;amp; compinit
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Embedded Gists</title>
      <link>http://yujinqiu.github.io/posts/embedded_gists/</link>
      <pubDate>Sat, 05 Jul 2014 00:00:00 UTC</pubDate>
      
      <guid>http://yujinqiu.github.io/posts/embedded_gists/</guid>
      <description>

&lt;h2 id=&#34;toc_0&#34;&gt;Syntax Highlighting - or Embedded Gists&lt;/h2&gt;

&lt;p&gt;I was quite excited by the inline syntax highlighting that Hugo provides via the python plugin &lt;a href=&#34;http://pygments.org/&#34;&gt;Pygments&lt;/a&gt;. But also wanted to try embedding gists&lt;/p&gt;

&lt;p&gt;So here is an example&amp;hellip;&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #202020&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #447fcf&#34;&gt;digit_sum&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;(n):&lt;/span&gt;
    &lt;span style=&#34;color: #d0d0d0&#34;&gt;s&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #3677a9&#34;&gt;0&lt;/span&gt;
    &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;n:&lt;/span&gt;   &lt;span style=&#34;color: #999999; font-style: italic&#34;&gt;# while n is ‘truthy’ for an integer that means not 0&lt;/span&gt;
        &lt;span style=&#34;color: #d0d0d0&#34;&gt;s&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;s&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;(n&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color: #3677a9&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;)&lt;/span&gt;   &lt;span style=&#34;color: #999999; font-style: italic&#34;&gt;# the sum is the sum + the remainder of dividing the incoming number (n) by 10  157 % 10 = 7&lt;/span&gt;
        &lt;span style=&#34;color: #d0d0d0&#34;&gt;n&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;n&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color: #3677a9&#34;&gt;10&lt;/span&gt;         &lt;span style=&#34;color: #999999; font-style: italic&#34;&gt;# n = the integer of n / 10   int(15.7) = 15&lt;/span&gt;
    &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;s&amp;lt;/p&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #d0d0d0&#34;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;digit_sum(&lt;/span&gt;&lt;span style=&#34;color: #3677a9&#34;&gt;157&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;)&amp;lt;/p&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #d0d0d0&#34;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #a61717; background-color: #e3d2d2&#34;&gt;”’&lt;/span&gt;
&lt;span style=&#34;color: #d0d0d0&#34;&gt;calling&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;digit_sum(&lt;/span&gt;&lt;span style=&#34;color: #3677a9&#34;&gt;157&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;)&amp;lt;/p&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #d0d0d0&#34;&gt;&amp;lt;h2&amp;gt;loop&lt;/span&gt;  &lt;span style=&#34;color: #d0d0d0&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;s&lt;/span&gt;   &lt;span style=&#34;color: #d0d0d0&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;n&lt;/span&gt;   &lt;span style=&#34;color: #d0d0d0&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;n&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color: #3677a9&#34;&gt;10&lt;/span&gt;  &lt;span style=&#34;color: #d0d0d0&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;n&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color: #3677a9&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #d0d0d0&#34;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #3677a9&#34;&gt;0&lt;/span&gt;     &lt;span style=&#34;color: #d0d0d0&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color: #3677a9&#34;&gt;0&lt;/span&gt;   &lt;span style=&#34;color: #d0d0d0&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color: #3677a9&#34;&gt;157&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;|&lt;/span&gt;   &lt;span style=&#34;color: #3677a9&#34;&gt;7&lt;/span&gt;     &lt;span style=&#34;color: #d0d0d0&#34;&gt;|&lt;/span&gt;  &lt;span style=&#34;color: #3677a9&#34;&gt;15&lt;/span&gt;
&lt;span style=&#34;color: #3677a9&#34;&gt;1&lt;/span&gt;     &lt;span style=&#34;color: #d0d0d0&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color: #3677a9&#34;&gt;7&lt;/span&gt;   &lt;span style=&#34;color: #d0d0d0&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color: #3677a9&#34;&gt;15&lt;/span&gt;  &lt;span style=&#34;color: #d0d0d0&#34;&gt;|&lt;/span&gt;   &lt;span style=&#34;color: #3677a9&#34;&gt;5&lt;/span&gt;     &lt;span style=&#34;color: #d0d0d0&#34;&gt;|&lt;/span&gt;  &lt;span style=&#34;color: #3677a9&#34;&gt;1&lt;/span&gt;
&lt;span style=&#34;color: #3677a9&#34;&gt;2&lt;/span&gt;     &lt;span style=&#34;color: #d0d0d0&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color: #3677a9&#34;&gt;12&lt;/span&gt;  &lt;span style=&#34;color: #d0d0d0&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color: #3677a9&#34;&gt;1&lt;/span&gt;   &lt;span style=&#34;color: #d0d0d0&#34;&gt;|&lt;/span&gt;   &lt;span style=&#34;color: #3677a9&#34;&gt;1&lt;/span&gt;     &lt;span style=&#34;color: #d0d0d0&#34;&gt;|&lt;/span&gt;  &lt;span style=&#34;color: #3677a9&#34;&gt;0&lt;/span&gt;
&lt;span style=&#34;color: #3677a9&#34;&gt;3&lt;/span&gt;     &lt;span style=&#34;color: #d0d0d0&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color: #3677a9&#34;&gt;13&lt;/span&gt;  &lt;span style=&#34;color: #d0d0d0&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color: #3677a9&#34;&gt;0&lt;/span&gt;   &lt;span style=&#34;color: #d0d0d0&#34;&gt;|&lt;/span&gt;         &lt;span style=&#34;color: #d0d0d0&#34;&gt;|&amp;lt;br&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #a61717; background-color: #e3d2d2&#34;&gt;”’&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;But then thought perhaps it is better to embed gists than have inline markup in blog posts then folk can fork the code and comment there.&lt;/p&gt;

&lt;p&gt;So on embedding a gist as follows (but without syntax highlighting) failed&amp;hellip;&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #202020&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;&amp;lt;script &lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt;src=&lt;/span&gt;&lt;span style=&#34;color: #ed9d13&#34;&gt;&amp;quot;https://gist.github.com/danmux/042fa69bed3791afe658.js&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Putting it in another block partially worked&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #202020&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;&amp;lt;script &lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt;src=&lt;/span&gt;&lt;span style=&#34;color: #ed9d13&#34;&gt;&amp;quot;https://gist.github.com/danmux/042fa69bed3791afe658.js&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I was left with an unclosed script tag.&lt;/p&gt;

&lt;p&gt;A git of googling turned up this thread&amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://groups.google.com/forum/#!topic/hugo-discuss/3GW56aMYQF8&#34;&gt;https://groups.google.com/forum/#!topic/hugo-discuss/3GW56aMYQF8&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;and this pull request &amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/spf13/hugo/pull/305&#34;&gt;https://github.com/spf13/hugo/pull/305&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;which missed the latest release by a few days&amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/spf13/hugo/releases/tag/v0.11&#34;&gt;https://github.com/spf13/hugo/releases/tag/v0.11&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So I went ahead an built the master head - from my fork (ya know just in case I can help)&lt;/p&gt;

&lt;p&gt;and added the script tag in&amp;hellip;.&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/danmux/042fa69bed3791afe658.js&#34;&gt;&lt;/script&gt;

&lt;h3 id=&#34;toc_1&#34;&gt;And it worked !&lt;/h3&gt;

&lt;p&gt;Nice work &lt;a href=&#34;https://github.com/jmitchell&#34;&gt;jmitchell&lt;/a&gt; and &lt;a href=&#34;https://github.com/spf13&#34;&gt;Steve Francia&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So gists it is for me&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Making Your Own Summary</title>
      <link>http://yujinqiu.github.io/posts/hugo_summary/</link>
      <pubDate>Sat, 28 Jun 2014 00:00:00 UTC</pubDate>
      
      <guid>http://yujinqiu.github.io/posts/hugo_summary/</guid>
      <description>&lt;p&gt;Hugo allows you to specify where the summary stops - and allows the full markdown including shortcodes.&lt;/p&gt;

&lt;p&gt;You just need to construct the first bit of your article so that it makes a nice summary and then end it with&amp;hellip;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(of course dont include the space :) )&lt;/p&gt;

&lt;!-- here is the real more... --&gt;

&lt;p&gt;Everything after the more comment will not make it into the summary - sweet.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>30 days of hacking Docker</title>
      <link>http://yujinqiu.github.io/posts/streak/</link>
      <pubDate>Wed, 11 Jun 2014 00:00:00 UTC</pubDate>
      
      <guid>http://yujinqiu.github.io/posts/streak/</guid>
      <description>

&lt;h3 id=&#34;toc_0&#34;&gt;Prelude&lt;/h3&gt;

&lt;p&gt;Yesterday I finished my first 30-day &lt;a href=&#34;https://github.com/LK4D4&#34;&gt;streak&lt;/a&gt; on GitHub.
Most of contributions were to &lt;a href=&#34;https://github.com/dotcloud/docker&#34;&gt;Docker&lt;/a&gt; &amp;ndash;
the biggest opensource project on Go. I learned a lot in this month, and it was
really cool. I think that this is mostly because of Go language. I&amp;rsquo;ve been
programming on Python for five years and I was never so excited about open source,
because Python is not even half so fun as Go.&lt;/p&gt;

&lt;h3 id=&#34;toc_1&#34;&gt;1. Tools&lt;/h3&gt;

&lt;p&gt;There are a lot of tools for go, some of them just are &amp;ldquo;must have&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://godoc.org/code.google.com/p/go.tools/cmd/goimports&#34;&gt;Goimports&lt;/a&gt; - like
&lt;code&gt;go fmt&lt;/code&gt; but with cool imports handling, I really think that &lt;code&gt;go fmt&lt;/code&gt; needs to
be replaced with &lt;code&gt;Goimports&lt;/code&gt; in future Go versions.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://godoc.org/code.google.com/p/go.tools/cmd/vet&#34;&gt;Vet&lt;/a&gt; - analyzes code for
some suspicious constructs. You can find with it: bad format strings, unreachable
code, passing mutex by value and etc.
&lt;a href=&#34;https://github.com/dotcloud/docker/pull/6269&#34;&gt;PR about vet erros in Docker&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/golang/lint&#34;&gt;Golint&lt;/a&gt; - checks code for
&lt;a href=&#34;https://code.google.com/p/go-wiki/wiki/CodeReviewComments&#34;&gt;google style guide&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;toc_2&#34;&gt;2. Editor&lt;/h3&gt;

&lt;p&gt;I love my awesome vim with awesome &lt;a href=&#34;https://github.com/fatih/vim-go&#34;&gt;vim-go&lt;/a&gt; plugin,
which is integrated with tools mentioned above.
It formats code for me, adds needed imports, removes unused imports, shows
documentation, supports tagbar and more. And my favourite - go to definition. I
really suffered without it :) With vim-go my development rate became faster
than I could imagine. You can see my config in my dotfiles
&lt;a href=&#34;https://github.com/LK4D4/dotfiles&#34;&gt;repo&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;toc_3&#34;&gt;3. Race detector&lt;/h3&gt;

&lt;p&gt;This is one of the most important and one of the most underestimated thing.
Very useful and very easy to use. You can find description and examples
&lt;a href=&#34;http://blog.golang.org/race-detector&#34;&gt;here&lt;/a&gt;. I&amp;rsquo;ve found many race conditions
with this tool (&lt;a href=&#34;https://github.com/dotcloud/docker/pull/6118&#34;&gt;#1&lt;/a&gt;,
&lt;a href=&#34;https://github.com/dotcloud/docker/pull/6150&#34;&gt;#2&lt;/a&gt;,
&lt;a href=&#34;https://github.com/dotcloud/docker/pull/6214&#34;&gt;#3&lt;/a&gt;,
&lt;a href=&#34;https://github.com/dotcloud/docker/pull/6232&#34;&gt;#4&lt;/a&gt;,
&lt;a href=&#34;https://github.com/gorilla/context/pull/14&#34;&gt;#5&lt;/a&gt;).&lt;/p&gt;

&lt;h3 id=&#34;toc_4&#34;&gt;4. Docker specific&lt;/h3&gt;

&lt;p&gt;Docker has very smart and friendly community. You can always ask for help about
hacking in #docker-dev on Freenode. But I&amp;rsquo;ll describe some simple tasks that appears
when you try to hack docker first time.&lt;/p&gt;

&lt;h4 id=&#34;toc_5&#34;&gt;Tests&lt;/h4&gt;

&lt;p&gt;There are three kinds of tests in docker repo:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;unit&lt;/code&gt; - unit tests(ah, we all know what unit tests are, right?). These tests
spreaded all over repository and can be run by &lt;code&gt;make test-unit&lt;/code&gt;. You can run
tests for one directory, specifying it in &lt;code&gt;TESTDIRS&lt;/code&gt; variable. For example&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;TESTDIRS=&amp;quot;daemon&amp;quot; make test-unit
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;will run tests only for daemon directory.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;integration-cli&lt;/code&gt; - integration tests, that use external docker commands
(for example &lt;code&gt;docker build&lt;/code&gt;, &lt;code&gt;docker run&lt;/code&gt;, etc.). It is very easy to write this
kind of tests and you should do it if you think that your changes can change
Docker&amp;rsquo;s behavior from client&amp;rsquo;s point of view. These tests are located in &lt;code&gt;integration-cli&lt;/code&gt;
directory and can be run by &lt;code&gt;make test-integration-cli&lt;/code&gt;. You can run one or more
specific tests with setting &lt;code&gt;TESTFLAGS&lt;/code&gt; variable. For example&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;TESTFLAGS=&amp;quot;-run TestBuild&amp;quot; make test-integration-cli
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;will run all tests whose names starts with &lt;code&gt;TestBuild&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;integration&lt;/code&gt; - integration tests, that use internal docker datastructures.
It is deprecated now, so if you want to write tests you should prefer
&lt;code&gt;integration-cli&lt;/code&gt; or &lt;code&gt;unit&lt;/code&gt;. These tests are located in &lt;code&gt;integration&lt;/code&gt; directory and
can be run by &lt;code&gt;make test-integration&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All tests can be run by &lt;code&gt;make test&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;toc_6&#34;&gt;Build and run tests on host&lt;/h4&gt;

&lt;p&gt;All &lt;code&gt;make&lt;/code&gt; commands execute in docker container, it can be pretty annoying to
build container just for running unit tests for example.&lt;/p&gt;

&lt;p&gt;So, for running unit test on host machine you need canonical Go
&lt;a href=&#34;http://golang.org/doc/code.html#Workspaces&#34;&gt;workspace&lt;/a&gt;. When it&amp;rsquo;s ready you can
just do symlink to docker repo in &lt;code&gt;src/github.com/dotcloud/docker&lt;/code&gt;. But we still
need right &lt;code&gt;$GOPATH&lt;/code&gt;, here is the trick:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;export GOPATH=&amp;lt;workspace&amp;gt;/src/github.com/dotcloud/docker/vendor:&amp;lt;workspace&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And then, for example you can run:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;go test github.com/dotcloud/docker/daemon/networkdriver/ipallocator
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Some tests require external libs for example &lt;code&gt;libdevmapper&lt;/code&gt;, you can disable
it with &lt;code&gt;DOCKER_BUILDTAGS&lt;/code&gt; environment variable. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;export DOCKER_BUILDTAGS=&#39;exclude_graphdriver_devicemapper exclude_graphdriver_aufs&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For fast building dynamic binary you can use this snippet in docker repo:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;export AUTO_GOPATH=1
export DOCKER_BUILDTAGS=&#39;exclude_graphdriver_devicemapper exclude_graphdriver_aufs&#39;
hack/make.sh dynbinary
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I use that &lt;code&gt;DOCKER_BUILDTAGS&lt;/code&gt; for my &lt;code&gt;btrfs&lt;/code&gt; system, so if you use &lt;code&gt;aufs&lt;/code&gt; or
&lt;code&gt;devicemapper&lt;/code&gt; you should change it for your driver.&lt;/p&gt;

&lt;h4 id=&#34;toc_7&#34;&gt;Race detection&lt;/h4&gt;

&lt;p&gt;To enable race detection in docker I&amp;rsquo;m using patch:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;diff --git a/hack/make/binary b/hack/make/binary
index b97069a..74b202d 100755
--- a/hack/make/binary
+++ b/hack/make/binary
@@ -6,6 +6,7 @@ DEST=$1
 go build \
        -o &amp;quot;$DEST/docker-$VERSION&amp;quot; \
        &amp;quot;${BUILDFLAGS[@]}&amp;quot; \
+       -race \
        -ldflags &amp;quot;
                $LDFLAGS
                $LDFLAGS_STATIC_DOCKER
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After that all binaries will be with race detection. Note that this will slow
docker a lot.&lt;/p&gt;

&lt;h4 id=&#34;toc_8&#34;&gt;Docker-stress&lt;/h4&gt;

&lt;p&gt;There is amazing
&lt;a href=&#34;https://github.com/spotify/docker-stress&#34;&gt;docker-stress&lt;/a&gt; from Spotify for
Docker load testing. Usage is pretty straightforward:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;./docker-stress -c 50 -t 5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here 50 clients are trying to run containers, which will alive for five seconds.
&lt;code&gt;docker-stress&lt;/code&gt; uses only &lt;code&gt;docker run&lt;/code&gt; jobs for testing, so I prefer also to run in
parallel sort of:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker events
while true; do docker inspect $(docker ps -lq); done
while true; do docker build -t test test; done
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and so on.&lt;/p&gt;

&lt;h4 id=&#34;toc_9&#34;&gt;Useful links&lt;/h4&gt;

&lt;p&gt;You definitely need to read
&lt;a href=&#34;https://github.com/dotcloud/docker/blob/master/CONTRIBUTING.md&#34;&gt;Contributing to Docker&lt;/a&gt;
and &lt;a href=&#34;https://github.com/dotcloud/docker/blob/master/docs/sources/contributing/devenvironment.md&#34;&gt;Setting Up a Dev Environment&lt;/a&gt;.
I really don&amp;rsquo;t think that something else is needed for Docker hacking start.&lt;/p&gt;

&lt;h3 id=&#34;toc_10&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;This is all that I wanted to tell you about my first big opensource experience.
Also, just today Docker folks launched some
&lt;a href=&#34;https://github.com/docker&#34;&gt;new projects&lt;/a&gt; and I am very excited about it.
So, I want to invite you all to the magical world of Go, Opensource and,
of course, Docker.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Moving to Hugo</title>
      <link>http://yujinqiu.github.io/posts/hugo_based_blog/</link>
      <pubDate>Thu, 29 May 2014 00:00:00 UTC</pubDate>
      
      <guid>http://yujinqiu.github.io/posts/hugo_based_blog/</guid>
      <description>

&lt;p&gt;I decided that I should blog under my danmux.com domain - I often use danmux around the internet, sometimes danmull, but normally danmux for tech type things, so it makes sense.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;danmux&lt;/strong&gt; because the &lt;strong&gt;x&lt;/strong&gt; has always been a notable part of my name - and mux reminds me of my electrical engineering days, and I think humans multiplex all the time, there it is.&lt;/p&gt;

&lt;h2 id=&#34;toc_0&#34;&gt;Github Pages&lt;/h2&gt;

&lt;p&gt;As this will only get a couple of hits what could be better than hosting it on &lt;a href=&#34;https://pages.github.com/&#34;&gt;github pages&lt;/a&gt; - I&amp;rsquo;m a little bit in love with github anyway so perfect choice.&lt;/p&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;Hugo&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;m a little bit in love with go - so &lt;a href=&#34;http://hugo.spf13.com/&#34;&gt;Hugo&lt;/a&gt; was the perfect choice as well, and its been great so far, other than is typical of newish open source projects slightly lacking in the documentation department.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Defer overhead in go</title>
      <link>http://yujinqiu.github.io/posts/defer/</link>
      <pubDate>Wed, 14 May 2014 00:00:00 UTC</pubDate>
      
      <guid>http://yujinqiu.github.io/posts/defer/</guid>
      <description>

&lt;h4 id=&#34;toc_0&#34;&gt;Prelude&lt;/h4&gt;

&lt;p&gt;This post based on
&lt;a href=&#34;https://github.com/dotcloud/docker/commit/5128feb690e8fd0244d1fecef5f3f5f77598bbfa&#34;&gt;real events&lt;/a&gt;
in docker repository.
When I revealed that my 20-percent-cooler refactoring made &lt;code&gt;Pop&lt;/code&gt; function x4-x5
times slower, I did some research and concluded, that problem was in using
&lt;code&gt;defer&lt;/code&gt; statement for unlocking everywhere.&lt;/p&gt;

&lt;p&gt;In this post I&amp;rsquo;ll write simple program and benchmarks from which we will see,
that sometimes &lt;code&gt;defer&lt;/code&gt; statement can slowdown your program a lot.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s create simple queue with methods &lt;code&gt;Put&lt;/code&gt; and &lt;code&gt;Get&lt;/code&gt;. Next snippets shows such
queue and benchmarks for it. Also I wrote duplicate methods with &lt;code&gt;defer&lt;/code&gt; and
without it.&lt;/p&gt;

&lt;h4 id=&#34;toc_1&#34;&gt;Code&lt;/h4&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #202020&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;defertest&amp;lt;/p&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #d0d0d0&#34;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;(&lt;/span&gt;
    &lt;span style=&#34;color: #a61717; background-color: #e3d2d2&#34;&gt;“&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;sync&lt;/span&gt;&lt;span style=&#34;color: #a61717; background-color: #e3d2d2&#34;&gt;”&lt;/span&gt;
&lt;span style=&#34;color: #d0d0d0&#34;&gt;)&amp;lt;/p&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #d0d0d0&#34;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;Queue&lt;/span&gt; &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #d0d0d0&#34;&gt;sync.Mutex&lt;/span&gt;
    &lt;span style=&#34;color: #d0d0d0&#34;&gt;arr&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;[]&lt;/span&gt;&lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;int&lt;/span&gt;
&lt;span style=&#34;color: #d0d0d0&#34;&gt;}&amp;lt;/p&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #d0d0d0&#34;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;New()&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;*Queue&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;&amp;amp;Queue{}&lt;/span&gt;
&lt;span style=&#34;color: #d0d0d0&#34;&gt;}&amp;lt;/p&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #d0d0d0&#34;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;(q&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;*Queue)&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;Put(elem&lt;/span&gt; &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #d0d0d0&#34;&gt;q.Lock()&lt;/span&gt;
    &lt;span style=&#34;color: #d0d0d0&#34;&gt;q.arr&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #24909d&#34;&gt;append&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;(q.arr,&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;elem)&lt;/span&gt;
    &lt;span style=&#34;color: #d0d0d0&#34;&gt;q.Unlock()&lt;/span&gt;
&lt;span style=&#34;color: #d0d0d0&#34;&gt;}&amp;lt;/p&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #d0d0d0&#34;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;(q&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;*Queue)&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;PutDefer(elem&lt;/span&gt; &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #d0d0d0&#34;&gt;q.Lock()&lt;/span&gt;
    &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;defer&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;q.Unlock()&lt;/span&gt;
    &lt;span style=&#34;color: #d0d0d0&#34;&gt;q.arr&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #24909d&#34;&gt;append&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;(q.arr,&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;elem)&lt;/span&gt;
&lt;span style=&#34;color: #d0d0d0&#34;&gt;}&amp;lt;/p&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #d0d0d0&#34;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;(q&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;*Queue)&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;Get()&lt;/span&gt; &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #d0d0d0&#34;&gt;q.Lock()&lt;/span&gt;
    &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #24909d&#34;&gt;len&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;(q.arr)&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #3677a9&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #d0d0d0&#34;&gt;q.Unlock()&lt;/span&gt;
        &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #3677a9&#34;&gt;0&lt;/span&gt;
    &lt;span style=&#34;color: #d0d0d0&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color: #d0d0d0&#34;&gt;res&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;q.arr[&lt;/span&gt;&lt;span style=&#34;color: #3677a9&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;]&lt;/span&gt;
    &lt;span style=&#34;color: #d0d0d0&#34;&gt;q.arr&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;q.arr[&lt;/span&gt;&lt;span style=&#34;color: #3677a9&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;:]&lt;/span&gt;
    &lt;span style=&#34;color: #d0d0d0&#34;&gt;q.Unlock()&lt;/span&gt;
    &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;res&lt;/span&gt;
&lt;span style=&#34;color: #d0d0d0&#34;&gt;}&amp;lt;/p&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #d0d0d0&#34;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;(q&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;*Queue)&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;GetDefer()&lt;/span&gt; &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #d0d0d0&#34;&gt;q.Lock()&lt;/span&gt;
    &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;defer&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;q.Unlock()&lt;/span&gt;
    &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #24909d&#34;&gt;len&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;(q.arr)&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #3677a9&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #3677a9&#34;&gt;0&lt;/span&gt;
    &lt;span style=&#34;color: #d0d0d0&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color: #d0d0d0&#34;&gt;res&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;q.arr[&lt;/span&gt;&lt;span style=&#34;color: #3677a9&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;]&lt;/span&gt;
    &lt;span style=&#34;color: #d0d0d0&#34;&gt;q.arr&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;q.arr[&lt;/span&gt;&lt;span style=&#34;color: #3677a9&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;:]&lt;/span&gt;
    &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;res&lt;/span&gt;
&lt;span style=&#34;color: #d0d0d0&#34;&gt;}&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&#34;toc_2&#34;&gt;Benchmarks&lt;/h4&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #202020&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;defertest&amp;lt;/p&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #d0d0d0&#34;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;(&lt;/span&gt;
    &lt;span style=&#34;color: #a61717; background-color: #e3d2d2&#34;&gt;“&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;testing&lt;/span&gt;&lt;span style=&#34;color: #a61717; background-color: #e3d2d2&#34;&gt;”&lt;/span&gt;
&lt;span style=&#34;color: #d0d0d0&#34;&gt;)&amp;lt;/p&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #d0d0d0&#34;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;BenchmarkPut(b&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;*testing.B)&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #d0d0d0&#34;&gt;q&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;New()&lt;/span&gt;
    &lt;span style=&#34;color: #d0d0d0&#34;&gt;b.ResetTimer()&lt;/span&gt;
    &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #3677a9&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;b.N;&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;i++&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;j&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #3677a9&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;j&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #3677a9&#34;&gt;1000&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;j++&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color: #d0d0d0&#34;&gt;q.Put(j)&lt;/span&gt;
        &lt;span style=&#34;color: #d0d0d0&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color: #d0d0d0&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #d0d0d0&#34;&gt;}&amp;lt;/p&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #d0d0d0&#34;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;BenchmarkPutDefer(b&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;*testing.B)&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #d0d0d0&#34;&gt;q&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;New()&lt;/span&gt;
    &lt;span style=&#34;color: #d0d0d0&#34;&gt;b.ResetTimer()&lt;/span&gt;
    &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #3677a9&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;b.N;&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;i++&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;j&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #3677a9&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;j&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #3677a9&#34;&gt;1000&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;j++&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color: #d0d0d0&#34;&gt;q.PutDefer(j)&lt;/span&gt;
        &lt;span style=&#34;color: #d0d0d0&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color: #d0d0d0&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #d0d0d0&#34;&gt;}&amp;lt;/p&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #d0d0d0&#34;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;BenchmarkGet(b&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;*testing.B)&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #d0d0d0&#34;&gt;q&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;New()&lt;/span&gt;
    &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #3677a9&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #3677a9&#34;&gt;1000&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;i++&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #d0d0d0&#34;&gt;q.Put(i)&lt;/span&gt;
    &lt;span style=&#34;color: #d0d0d0&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color: #d0d0d0&#34;&gt;b.ResetTimer()&lt;/span&gt;
    &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #3677a9&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;b.N;&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;i++&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;j&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #3677a9&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;j&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #3677a9&#34;&gt;2000&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;j++&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color: #d0d0d0&#34;&gt;q.Get()&lt;/span&gt;
        &lt;span style=&#34;color: #d0d0d0&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color: #d0d0d0&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #d0d0d0&#34;&gt;}&amp;lt;/p&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #d0d0d0&#34;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;BenchmarkGetDefer(b&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;*testing.B)&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #d0d0d0&#34;&gt;q&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;New()&lt;/span&gt;
    &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #3677a9&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #3677a9&#34;&gt;1000&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;i++&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #d0d0d0&#34;&gt;q.Put(i)&lt;/span&gt;
    &lt;span style=&#34;color: #d0d0d0&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color: #d0d0d0&#34;&gt;b.ResetTimer()&lt;/span&gt;
    &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #3677a9&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;b.N;&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;i++&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;j&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #3677a9&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;j&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #3677a9&#34;&gt;2000&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;j++&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color: #d0d0d0&#34;&gt;q.GetDefer()&lt;/span&gt;
        &lt;span style=&#34;color: #d0d0d0&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color: #d0d0d0&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #d0d0d0&#34;&gt;}&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&#34;toc_3&#34;&gt;Results&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;BenchmarkPut       50000             63002 ns/op
BenchmarkPutDefer  10000            143391 ns/op
BenchmarkGet       50000             72045 ns/op
BenchmarkGetDefer  10000            249029 ns/op
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;toc_4&#34;&gt;Conclusion&lt;/h4&gt;

&lt;p&gt;You don&amp;rsquo;t need defers in small functions with one-two exit points.&lt;/p&gt;

&lt;h4 id=&#34;toc_5&#34;&gt;Update&lt;/h4&gt;

&lt;p&gt;Retested with go from &lt;code&gt;tip&lt;/code&gt; as Cezar Sá Espinola suggested. So, here results:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;BenchmarkPut       50000             54633 ns/op
BenchmarkPutDefer  10000            102971 ns/op
BenchmarkGet       50000             65148 ns/op
BenchmarkGetDefer  10000            180839 ns/op
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Coverage for multiple packages in go</title>
      <link>http://yujinqiu.github.io/posts/multicover/</link>
      <pubDate>Tue, 06 May 2014 00:00:00 UTC</pubDate>
      
      <guid>http://yujinqiu.github.io/posts/multicover/</guid>
      <description>

&lt;h4 id=&#34;toc_0&#34;&gt;Prelude&lt;/h4&gt;

&lt;p&gt;There is awesome coverage in go. You can read about
it &lt;a href=&#34;http://blog.golang.org/cover&#34;&gt;here&lt;/a&gt;. But also it has some limitations.
For example let&amp;rsquo;s assume that we have next code structure:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;src
├── pkg1
│   ├── pkg11
│   └── pkg12
└── pkg2
    ├── pkg21
    └── pkg22
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;pkg2&lt;/code&gt;, &lt;code&gt;pkg21&lt;/code&gt;, &lt;code&gt;pkg22&lt;/code&gt; uses &lt;code&gt;pkg1&lt;/code&gt;, &lt;code&gt;pkg11&lt;/code&gt; and &lt;code&gt;pkg12&lt;/code&gt; in different cases.
So question is &amp;ndash; how we can compute &lt;strong&gt;overall&lt;/strong&gt; coverage for our code base?&lt;/p&gt;

&lt;h4 id=&#34;toc_1&#34;&gt;Generating cover profiles&lt;/h4&gt;

&lt;p&gt;Let&amp;rsquo;s consider some possible go test commands with &lt;code&gt;-coveprofile&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;go test -coverprofile=cover.out pkg2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;tests run only for &lt;code&gt;pkg1&lt;/code&gt; and cover profile generated only for pkg2&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;go test -coverprofile=cover.out -coverpkg=./... pkg2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;tests run only for &lt;code&gt;pkg2&lt;/code&gt; and cover profile generated for all packages&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;go test -coverprofile=cover.out -coverpkg=./... ./...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;boo hoo: &lt;code&gt;cannot use test profile flag with multiple packages&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;So, what we can do for running tests on all packages and get cover profile
for all packages?&lt;/p&gt;

&lt;h4 id=&#34;toc_2&#34;&gt;Merging cover profiles&lt;/h4&gt;

&lt;p&gt;Now we able to get overall profile for each package individually.
It seems that we can merge this files. Profile file has next structure,
according to
&lt;a href=&#34;https://code.google.com/p/go/source/browse/cover/profile.go?repo=tools&#34;&gt;cover code&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// First line is &amp;quot;mode: foo&amp;quot;, where foo is &amp;quot;set&amp;quot;, &amp;quot;count&amp;quot;, or &amp;quot;atomic&amp;quot;.
// Rest of file is in the format
//      encoding/base64/base64.go:34.44,37.40 3 1
// where the fields are: name.go:line.column,line.column numberOfStatements count
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So, using magic of &lt;code&gt;awk&lt;/code&gt; I found next solution to this problem:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;go test -coverprofile=pkg1.cover.out -coverpkg=./... pkg1
go test -coverprofile=pkg11.cover.out -coverpkg=./... pkg1/pkg11
go test -coverprofile=pkg12.cover.out -coverpkg=./... pkg1/pkg12
go test -coverprofile=pkg2.cover.out -coverpkg=./... pkg2
go test -coverprofile=pkg21.cover.out -coverpkg=./... pkg2/pkg21
go test -coverprofile=pkg22.cover.out -coverpkg=./... pkg2/pkg22
echo &amp;quot;mode: set&amp;quot; &amp;gt; coverage.out &amp;amp;&amp;amp; cat *.cover.out | grep -v mode: | sort -r | \
awk &#39;{if($1 != last) {print $0;last=$1}}&#39; &amp;gt;&amp;gt; coverage.out
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The true meaning of last line I leave as an exercise for user :)
Now we have profile for all code, that was executed by all tests. We can use
this merged profile &lt;code&gt;coverage.out&lt;/code&gt; for go cover tool:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;go tool cover -html=coverage.out
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or for generating &lt;a href=&#34;https://github.com/t-yuki/gocover-cobertura&#34;&gt;cobertura report&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gocover-cobertura &amp;lt; coverage.txt &amp;gt; coverage.xml
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;toc_3&#34;&gt;Conclusion&lt;/h4&gt;

&lt;p&gt;Of course this solution is only workaround. And it works only for &lt;code&gt;mode: set&lt;/code&gt;.
Similar logic must be embedded to cover tool. I am really hope that one day we
will be able to run&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;go test -coverprofile=cover.out -coverpkg=./... ./...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and leaning back in chair, enjoying perfect cover profiles.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Deploying blog with docker and hugo</title>
      <link>http://yujinqiu.github.io/posts/hugoblog/</link>
      <pubDate>Sun, 04 May 2014 00:00:00 UTC</pubDate>
      
      <guid>http://yujinqiu.github.io/posts/hugoblog/</guid>
      <description>

&lt;h4 id=&#34;toc_0&#34;&gt;Prelude&lt;/h4&gt;

&lt;p&gt;Recently I moved my jabber-server to DigitalOcean VPS. Run Prosody in docker was
so easy, that I decided create this blog. And of course deploy it with docker!&lt;/p&gt;

&lt;h4 id=&#34;toc_1&#34;&gt;Content&lt;/h4&gt;

&lt;p&gt;At first we need container with templates and content for blog generation.
I used next dockerfile:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;FROM debian:jessie

RUN apt-get update &amp;amp;&amp;amp; apt-get install --no-install-recommends -y ca-certificates git-core
RUN git clone http://github.com/LK4D4/lk4d4.darth.io.git /src
VOLUME [&amp;quot;/src&amp;quot;]
WORKDIR /src
ENTRYPOINT [&amp;quot;git&amp;quot;]
CMD [&amp;quot;pull&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There is no magic here: just clone repo to &lt;code&gt;/src&lt;/code&gt; (it will be used below),
and update it on container start.&lt;/p&gt;

&lt;p&gt;Build image:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker build -t blog/content .
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Create data container:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker run --name blog_content blog/content
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For updating content and templates from github we need just:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker start blog_content
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;toc_2&#34;&gt;Hugo&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;http://hugo.spf13.com&#34;&gt;Hugo&lt;/a&gt; &amp;ndash; very fast static site generator, written in Go (so
many cool things written in Go btw).&lt;/p&gt;

&lt;p&gt;Idea is to run hugo in docker container so it reads contents from one directory
and writes generated blog to another.&lt;/p&gt;

&lt;p&gt;Hugo dockerfile:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;FROM crosbymichael/golang

RUN apt-get update &amp;amp;&amp;amp; apt-get install --no-install-recommends -y bzr

RUN go get github.com/spf13/hugo

VOLUME [&amp;quot;/var/www/blog&amp;quot;]

ENTRYPOINT [&amp;quot;hugo&amp;quot;]
CMD [&amp;quot;-w&amp;quot;, &amp;quot;-s&amp;quot;, &amp;quot;/src&amp;quot;, &amp;quot;-d&amp;quot;, &amp;quot;/var/www/blog&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So, here we &lt;code&gt;go get&lt;/code&gt; hugo and use /src(remember this from content container?)
as source directory for it and &lt;code&gt;/var/www/blog&lt;/code&gt; as destination.&lt;/p&gt;

&lt;p&gt;Now build image and run container with hugo:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker build -t blog/rendered .
docker run --name blog --volumes-from blog_content blog/rendered
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here the trick with
&lt;a href=&#34;http://docs.docker.io/use/working_with_volumes/&#34;&gt;&lt;code&gt;--volumes-from&lt;/code&gt;&lt;/a&gt; &amp;ndash; we used
&lt;code&gt;/src&lt;/code&gt; from &lt;code&gt;blog_content&lt;/code&gt; container, and yeah, we&amp;rsquo;re going to use
&lt;code&gt;/var/www/blog&lt;/code&gt; from &lt;code&gt;blog&lt;/code&gt; container.&lt;/p&gt;

&lt;h4 id=&#34;toc_3&#34;&gt;Nginx&lt;/h4&gt;

&lt;p&gt;So, now we have container with templates and content &lt;code&gt;blog_content&lt;/code&gt;, content
with ready to use blog &lt;code&gt;blog&lt;/code&gt;, it&amp;rsquo;s time to show this blog to the world.&lt;/p&gt;

&lt;p&gt;I write simple config for nginx:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;server {
    listen 80;
    server_name lk4d4.darth.io;
    location / {
        root /var/www/blog;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Put it to sites-enabled directory, which used in this pretty dockerfile:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;FROM dockerfile/nginx

ADD sites-enabled/ /etc/nginx/sites-enabled
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Build image and run container with nginx:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker build -t nginx .
docker run -p 80:80 -d --name=nginx --volumes-from=blog nginx
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;rsquo;s it, now blog is running on &lt;a href=&#34;http://lk4d4.darth.io&#34;&gt;lk4d4.darth.io&lt;/a&gt; and
you can read it :) I can update it just with &lt;code&gt;docker start blog_content&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;toc_4&#34;&gt;Conclusions&lt;/h4&gt;

&lt;p&gt;It&amp;rsquo;s really fun to use docker. You don&amp;rsquo;t need to install and remove
tons of crap on host machine, docker can handle it all for you.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>