<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Go on Engineer&#39;s Draft </title>
      <generator uri="https://hugo.spf13.com">Hugo</generator>
    <link>http://localhost:1313/categories/go/index.xml/</link>
    
    
    
    <updated>Wed, 11 Jun 2014 00:00:00 UTC</updated>
    
    <item>
      <title>30 days of hacking Docker</title>
      <link>http://localhost:1313/posts/streak/</link>
      <pubDate>Wed, 11 Jun 2014 00:00:00 UTC</pubDate>
      
      <guid>http://localhost:1313/posts/streak/</guid>
      <description>

&lt;h3 id=&#34;toc_0&#34;&gt;Prelude&lt;/h3&gt;

&lt;p&gt;Yesterday I finished my first 30-day &lt;a href=&#34;https://github.com/LK4D4&#34;&gt;streak&lt;/a&gt; on GitHub.
Most of contributions were to &lt;a href=&#34;https://github.com/dotcloud/docker&#34;&gt;Docker&lt;/a&gt; &amp;ndash;
the biggest opensource project on Go. I learned a lot in this month, and it was
really cool. I think that this is mostly because of Go language. I&amp;rsquo;ve been
programming on Python for five years and I was never so excited about open source,
because Python is not even half so fun as Go.&lt;/p&gt;

&lt;h3 id=&#34;toc_1&#34;&gt;1. Tools&lt;/h3&gt;

&lt;p&gt;There are a lot of tools for go, some of them just are &amp;ldquo;must have&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://godoc.org/code.google.com/p/go.tools/cmd/goimports&#34;&gt;Goimports&lt;/a&gt; - like
&lt;code&gt;go fmt&lt;/code&gt; but with cool imports handling, I really think that &lt;code&gt;go fmt&lt;/code&gt; needs to
be replaced with &lt;code&gt;Goimports&lt;/code&gt; in future Go versions.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://godoc.org/code.google.com/p/go.tools/cmd/vet&#34;&gt;Vet&lt;/a&gt; - analyzes code for
some suspicious constructs. You can find with it: bad format strings, unreachable
code, passing mutex by value and etc.
&lt;a href=&#34;https://github.com/dotcloud/docker/pull/6269&#34;&gt;PR about vet erros in Docker&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/golang/lint&#34;&gt;Golint&lt;/a&gt; - checks code for
&lt;a href=&#34;https://code.google.com/p/go-wiki/wiki/CodeReviewComments&#34;&gt;google style guide&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;toc_2&#34;&gt;2. Editor&lt;/h3&gt;

&lt;p&gt;I love my awesome vim with awesome &lt;a href=&#34;https://github.com/fatih/vim-go&#34;&gt;vim-go&lt;/a&gt; plugin,
which is integrated with tools mentioned above.
It formats code for me, adds needed imports, removes unused imports, shows
documentation, supports tagbar and more. And my favourite - go to definition. I
really suffered without it :) With vim-go my development rate became faster
than I could imagine. You can see my config in my dotfiles
&lt;a href=&#34;https://github.com/LK4D4/dotfiles&#34;&gt;repo&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;toc_3&#34;&gt;3. Race detector&lt;/h3&gt;

&lt;p&gt;This is one of the most important and one of the most underestimated thing.
Very useful and very easy to use. You can find description and examples
&lt;a href=&#34;http://blog.golang.org/race-detector&#34;&gt;here&lt;/a&gt;. I&amp;rsquo;ve found many race conditions
with this tool (&lt;a href=&#34;https://github.com/dotcloud/docker/pull/6118&#34;&gt;#1&lt;/a&gt;,
&lt;a href=&#34;https://github.com/dotcloud/docker/pull/6150&#34;&gt;#2&lt;/a&gt;,
&lt;a href=&#34;https://github.com/dotcloud/docker/pull/6214&#34;&gt;#3&lt;/a&gt;,
&lt;a href=&#34;https://github.com/dotcloud/docker/pull/6232&#34;&gt;#4&lt;/a&gt;,
&lt;a href=&#34;https://github.com/gorilla/context/pull/14&#34;&gt;#5&lt;/a&gt;).&lt;/p&gt;

&lt;h3 id=&#34;toc_4&#34;&gt;4. Docker specific&lt;/h3&gt;

&lt;p&gt;Docker has very smart and friendly community. You can always ask for help about
hacking in #docker-dev on Freenode. But I&amp;rsquo;ll describe some simple tasks that appears
when you try to hack docker first time.&lt;/p&gt;

&lt;h4 id=&#34;toc_5&#34;&gt;Tests&lt;/h4&gt;

&lt;p&gt;There are three kinds of tests in docker repo:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;unit&lt;/code&gt; - unit tests(ah, we all know what unit tests are, right?). These tests
spreaded all over repository and can be run by &lt;code&gt;make test-unit&lt;/code&gt;. You can run
tests for one directory, specifying it in &lt;code&gt;TESTDIRS&lt;/code&gt; variable. For example&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;TESTDIRS=&amp;quot;daemon&amp;quot; make test-unit
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;will run tests only for daemon directory.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;integration-cli&lt;/code&gt; - integration tests, that use external docker commands
(for example &lt;code&gt;docker build&lt;/code&gt;, &lt;code&gt;docker run&lt;/code&gt;, etc.). It is very easy to write this
kind of tests and you should do it if you think that your changes can change
Docker&amp;rsquo;s behavior from client&amp;rsquo;s point of view. These tests are located in &lt;code&gt;integration-cli&lt;/code&gt;
directory and can be run by &lt;code&gt;make test-integration-cli&lt;/code&gt;. You can run one or more
specific tests with setting &lt;code&gt;TESTFLAGS&lt;/code&gt; variable. For example&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;TESTFLAGS=&amp;quot;-run TestBuild&amp;quot; make test-integration-cli
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;will run all tests whose names starts with &lt;code&gt;TestBuild&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;integration&lt;/code&gt; - integration tests, that use internal docker datastructures.
It is deprecated now, so if you want to write tests you should prefer
&lt;code&gt;integration-cli&lt;/code&gt; or &lt;code&gt;unit&lt;/code&gt;. These tests are located in &lt;code&gt;integration&lt;/code&gt; directory and
can be run by &lt;code&gt;make test-integration&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All tests can be run by &lt;code&gt;make test&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;toc_6&#34;&gt;Build and run tests on host&lt;/h4&gt;

&lt;p&gt;All &lt;code&gt;make&lt;/code&gt; commands execute in docker container, it can be pretty annoying to
build container just for running unit tests for example.&lt;/p&gt;

&lt;p&gt;So, for running unit test on host machine you need canonical Go
&lt;a href=&#34;http://golang.org/doc/code.html#Workspaces&#34;&gt;workspace&lt;/a&gt;. When it&amp;rsquo;s ready you can
just do symlink to docker repo in &lt;code&gt;src/github.com/dotcloud/docker&lt;/code&gt;. But we still
need right &lt;code&gt;$GOPATH&lt;/code&gt;, here is the trick:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;export GOPATH=&amp;lt;workspace&amp;gt;/src/github.com/dotcloud/docker/vendor:&amp;lt;workspace&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And then, for example you can run:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;go test github.com/dotcloud/docker/daemon/networkdriver/ipallocator
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Some tests require external libs for example &lt;code&gt;libdevmapper&lt;/code&gt;, you can disable
it with &lt;code&gt;DOCKER_BUILDTAGS&lt;/code&gt; environment variable. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;export DOCKER_BUILDTAGS=&#39;exclude_graphdriver_devicemapper exclude_graphdriver_aufs&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For fast building dynamic binary you can use this snippet in docker repo:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;export AUTO_GOPATH=1
export DOCKER_BUILDTAGS=&#39;exclude_graphdriver_devicemapper exclude_graphdriver_aufs&#39;
hack/make.sh dynbinary
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I use that &lt;code&gt;DOCKER_BUILDTAGS&lt;/code&gt; for my &lt;code&gt;btrfs&lt;/code&gt; system, so if you use &lt;code&gt;aufs&lt;/code&gt; or
&lt;code&gt;devicemapper&lt;/code&gt; you should change it for your driver.&lt;/p&gt;

&lt;h4 id=&#34;toc_7&#34;&gt;Race detection&lt;/h4&gt;

&lt;p&gt;To enable race detection in docker I&amp;rsquo;m using patch:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;diff --git a/hack/make/binary b/hack/make/binary
index b97069a..74b202d 100755
--- a/hack/make/binary
+++ b/hack/make/binary
@@ -6,6 +6,7 @@ DEST=$1
 go build \
        -o &amp;quot;$DEST/docker-$VERSION&amp;quot; \
        &amp;quot;${BUILDFLAGS[@]}&amp;quot; \
+       -race \
        -ldflags &amp;quot;
                $LDFLAGS
                $LDFLAGS_STATIC_DOCKER
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After that all binaries will be with race detection. Note that this will slow
docker a lot.&lt;/p&gt;

&lt;h4 id=&#34;toc_8&#34;&gt;Docker-stress&lt;/h4&gt;

&lt;p&gt;There is amazing
&lt;a href=&#34;https://github.com/spotify/docker-stress&#34;&gt;docker-stress&lt;/a&gt; from Spotify for
Docker load testing. Usage is pretty straightforward:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;./docker-stress -c 50 -t 5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here 50 clients are trying to run containers, which will alive for five seconds.
&lt;code&gt;docker-stress&lt;/code&gt; uses only &lt;code&gt;docker run&lt;/code&gt; jobs for testing, so I prefer also to run in
parallel sort of:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker events
while true; do docker inspect $(docker ps -lq); done
while true; do docker build -t test test; done
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and so on.&lt;/p&gt;

&lt;h4 id=&#34;toc_9&#34;&gt;Useful links&lt;/h4&gt;

&lt;p&gt;You definitely need to read
&lt;a href=&#34;https://github.com/dotcloud/docker/blob/master/CONTRIBUTING.md&#34;&gt;Contributing to Docker&lt;/a&gt;
and &lt;a href=&#34;https://github.com/dotcloud/docker/blob/master/docs/sources/contributing/devenvironment.md&#34;&gt;Setting Up a Dev Environment&lt;/a&gt;.
I really don&amp;rsquo;t think that something else is needed for Docker hacking start.&lt;/p&gt;

&lt;h3 id=&#34;toc_10&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;This is all that I wanted to tell you about my first big opensource experience.
Also, just today Docker folks launched some
&lt;a href=&#34;https://github.com/docker&#34;&gt;new projects&lt;/a&gt; and I am very excited about it.
So, I want to invite you all to the magical world of Go, Opensource and,
of course, Docker.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Defer overhead in go</title>
      <link>http://localhost:1313/posts/defer/</link>
      <pubDate>Wed, 14 May 2014 00:00:00 UTC</pubDate>
      
      <guid>http://localhost:1313/posts/defer/</guid>
      <description>

&lt;h4 id=&#34;toc_0&#34;&gt;Prelude&lt;/h4&gt;

&lt;p&gt;This post based on
&lt;a href=&#34;https://github.com/dotcloud/docker/commit/5128feb690e8fd0244d1fecef5f3f5f77598bbfa&#34;&gt;real events&lt;/a&gt;
in docker repository.
When I revealed that my 20-percent-cooler refactoring made &lt;code&gt;Pop&lt;/code&gt; function x4-x5
times slower, I did some research and concluded, that problem was in using
&lt;code&gt;defer&lt;/code&gt; statement for unlocking everywhere.&lt;/p&gt;

&lt;p&gt;In this post I&amp;rsquo;ll write simple program and benchmarks from which we will see,
that sometimes &lt;code&gt;defer&lt;/code&gt; statement can slowdown your program a lot.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s create simple queue with methods &lt;code&gt;Put&lt;/code&gt; and &lt;code&gt;Get&lt;/code&gt;. Next snippets shows such
queue and benchmarks for it. Also I wrote duplicate methods with &lt;code&gt;defer&lt;/code&gt; and
without it.&lt;/p&gt;

&lt;h4 id=&#34;toc_1&#34;&gt;Code&lt;/h4&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #202020&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;defertest&amp;lt;/p&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #d0d0d0&#34;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;(&lt;/span&gt;
    &lt;span style=&#34;color: #a61717; background-color: #e3d2d2&#34;&gt;“&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;sync&lt;/span&gt;&lt;span style=&#34;color: #a61717; background-color: #e3d2d2&#34;&gt;”&lt;/span&gt;
&lt;span style=&#34;color: #d0d0d0&#34;&gt;)&amp;lt;/p&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #d0d0d0&#34;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;Queue&lt;/span&gt; &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #d0d0d0&#34;&gt;sync.Mutex&lt;/span&gt;
    &lt;span style=&#34;color: #d0d0d0&#34;&gt;arr&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;[]&lt;/span&gt;&lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;int&lt;/span&gt;
&lt;span style=&#34;color: #d0d0d0&#34;&gt;}&amp;lt;/p&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #d0d0d0&#34;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;New()&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;*Queue&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;&amp;amp;Queue{}&lt;/span&gt;
&lt;span style=&#34;color: #d0d0d0&#34;&gt;}&amp;lt;/p&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #d0d0d0&#34;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;(q&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;*Queue)&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;Put(elem&lt;/span&gt; &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #d0d0d0&#34;&gt;q.Lock()&lt;/span&gt;
    &lt;span style=&#34;color: #d0d0d0&#34;&gt;q.arr&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #24909d&#34;&gt;append&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;(q.arr,&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;elem)&lt;/span&gt;
    &lt;span style=&#34;color: #d0d0d0&#34;&gt;q.Unlock()&lt;/span&gt;
&lt;span style=&#34;color: #d0d0d0&#34;&gt;}&amp;lt;/p&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #d0d0d0&#34;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;(q&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;*Queue)&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;PutDefer(elem&lt;/span&gt; &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #d0d0d0&#34;&gt;q.Lock()&lt;/span&gt;
    &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;defer&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;q.Unlock()&lt;/span&gt;
    &lt;span style=&#34;color: #d0d0d0&#34;&gt;q.arr&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #24909d&#34;&gt;append&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;(q.arr,&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;elem)&lt;/span&gt;
&lt;span style=&#34;color: #d0d0d0&#34;&gt;}&amp;lt;/p&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #d0d0d0&#34;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;(q&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;*Queue)&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;Get()&lt;/span&gt; &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #d0d0d0&#34;&gt;q.Lock()&lt;/span&gt;
    &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #24909d&#34;&gt;len&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;(q.arr)&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #3677a9&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #d0d0d0&#34;&gt;q.Unlock()&lt;/span&gt;
        &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #3677a9&#34;&gt;0&lt;/span&gt;
    &lt;span style=&#34;color: #d0d0d0&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color: #d0d0d0&#34;&gt;res&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;q.arr[&lt;/span&gt;&lt;span style=&#34;color: #3677a9&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;]&lt;/span&gt;
    &lt;span style=&#34;color: #d0d0d0&#34;&gt;q.arr&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;q.arr[&lt;/span&gt;&lt;span style=&#34;color: #3677a9&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;:]&lt;/span&gt;
    &lt;span style=&#34;color: #d0d0d0&#34;&gt;q.Unlock()&lt;/span&gt;
    &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;res&lt;/span&gt;
&lt;span style=&#34;color: #d0d0d0&#34;&gt;}&amp;lt;/p&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #d0d0d0&#34;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;(q&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;*Queue)&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;GetDefer()&lt;/span&gt; &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #d0d0d0&#34;&gt;q.Lock()&lt;/span&gt;
    &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;defer&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;q.Unlock()&lt;/span&gt;
    &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #24909d&#34;&gt;len&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;(q.arr)&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #3677a9&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #3677a9&#34;&gt;0&lt;/span&gt;
    &lt;span style=&#34;color: #d0d0d0&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color: #d0d0d0&#34;&gt;res&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;q.arr[&lt;/span&gt;&lt;span style=&#34;color: #3677a9&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;]&lt;/span&gt;
    &lt;span style=&#34;color: #d0d0d0&#34;&gt;q.arr&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;q.arr[&lt;/span&gt;&lt;span style=&#34;color: #3677a9&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;:]&lt;/span&gt;
    &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;res&lt;/span&gt;
&lt;span style=&#34;color: #d0d0d0&#34;&gt;}&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&#34;toc_2&#34;&gt;Benchmarks&lt;/h4&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #202020&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;defertest&amp;lt;/p&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #d0d0d0&#34;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;(&lt;/span&gt;
    &lt;span style=&#34;color: #a61717; background-color: #e3d2d2&#34;&gt;“&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;testing&lt;/span&gt;&lt;span style=&#34;color: #a61717; background-color: #e3d2d2&#34;&gt;”&lt;/span&gt;
&lt;span style=&#34;color: #d0d0d0&#34;&gt;)&amp;lt;/p&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #d0d0d0&#34;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;BenchmarkPut(b&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;*testing.B)&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #d0d0d0&#34;&gt;q&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;New()&lt;/span&gt;
    &lt;span style=&#34;color: #d0d0d0&#34;&gt;b.ResetTimer()&lt;/span&gt;
    &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #3677a9&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;b.N;&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;i++&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;j&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #3677a9&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;j&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #3677a9&#34;&gt;1000&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;j++&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color: #d0d0d0&#34;&gt;q.Put(j)&lt;/span&gt;
        &lt;span style=&#34;color: #d0d0d0&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color: #d0d0d0&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #d0d0d0&#34;&gt;}&amp;lt;/p&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #d0d0d0&#34;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;BenchmarkPutDefer(b&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;*testing.B)&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #d0d0d0&#34;&gt;q&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;New()&lt;/span&gt;
    &lt;span style=&#34;color: #d0d0d0&#34;&gt;b.ResetTimer()&lt;/span&gt;
    &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #3677a9&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;b.N;&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;i++&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;j&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #3677a9&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;j&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #3677a9&#34;&gt;1000&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;j++&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color: #d0d0d0&#34;&gt;q.PutDefer(j)&lt;/span&gt;
        &lt;span style=&#34;color: #d0d0d0&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color: #d0d0d0&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #d0d0d0&#34;&gt;}&amp;lt;/p&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #d0d0d0&#34;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;BenchmarkGet(b&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;*testing.B)&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #d0d0d0&#34;&gt;q&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;New()&lt;/span&gt;
    &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #3677a9&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #3677a9&#34;&gt;1000&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;i++&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #d0d0d0&#34;&gt;q.Put(i)&lt;/span&gt;
    &lt;span style=&#34;color: #d0d0d0&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color: #d0d0d0&#34;&gt;b.ResetTimer()&lt;/span&gt;
    &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #3677a9&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;b.N;&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;i++&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;j&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #3677a9&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;j&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #3677a9&#34;&gt;2000&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;j++&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color: #d0d0d0&#34;&gt;q.Get()&lt;/span&gt;
        &lt;span style=&#34;color: #d0d0d0&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color: #d0d0d0&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #d0d0d0&#34;&gt;}&amp;lt;/p&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #d0d0d0&#34;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;BenchmarkGetDefer(b&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;*testing.B)&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #d0d0d0&#34;&gt;q&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;New()&lt;/span&gt;
    &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #3677a9&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #3677a9&#34;&gt;1000&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;i++&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #d0d0d0&#34;&gt;q.Put(i)&lt;/span&gt;
    &lt;span style=&#34;color: #d0d0d0&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color: #d0d0d0&#34;&gt;b.ResetTimer()&lt;/span&gt;
    &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #3677a9&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;b.N;&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;i++&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;j&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #3677a9&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;j&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #3677a9&#34;&gt;2000&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;j++&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color: #d0d0d0&#34;&gt;q.GetDefer()&lt;/span&gt;
        &lt;span style=&#34;color: #d0d0d0&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color: #d0d0d0&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #d0d0d0&#34;&gt;}&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&#34;toc_3&#34;&gt;Results&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;BenchmarkPut       50000             63002 ns/op
BenchmarkPutDefer  10000            143391 ns/op
BenchmarkGet       50000             72045 ns/op
BenchmarkGetDefer  10000            249029 ns/op
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;toc_4&#34;&gt;Conclusion&lt;/h4&gt;

&lt;p&gt;You don&amp;rsquo;t need defers in small functions with one-two exit points.&lt;/p&gt;

&lt;h4 id=&#34;toc_5&#34;&gt;Update&lt;/h4&gt;

&lt;p&gt;Retested with go from &lt;code&gt;tip&lt;/code&gt; as Cezar Sá Espinola suggested. So, here results:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;BenchmarkPut       50000             54633 ns/op
BenchmarkPutDefer          10000            102971 ns/op
BenchmarkGet       50000             65148 ns/op
BenchmarkGetDefer          10000            180839 ns/op
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Coverage for multiple packages in go</title>
      <link>http://localhost:1313/posts/multicover/</link>
      <pubDate>Tue, 06 May 2014 00:00:00 UTC</pubDate>
      
      <guid>http://localhost:1313/posts/multicover/</guid>
      <description>

&lt;h4 id=&#34;toc_0&#34;&gt;Prelude&lt;/h4&gt;

&lt;p&gt;There is awesome coverage in go. You can read about
it &lt;a href=&#34;http://blog.golang.org/cover&#34;&gt;here&lt;/a&gt;. But also it has some limitations.
For example let&amp;rsquo;s assume that we have next code structure:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;src
├── pkg1
│   ├── pkg11
│   └── pkg12
└── pkg2
    ├── pkg21
    └── pkg22
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;pkg2&lt;/code&gt;, &lt;code&gt;pkg21&lt;/code&gt;, &lt;code&gt;pkg22&lt;/code&gt; uses &lt;code&gt;pkg1&lt;/code&gt;, &lt;code&gt;pkg11&lt;/code&gt; and &lt;code&gt;pkg12&lt;/code&gt; in different cases.
So question is &amp;ndash; how we can compute &lt;strong&gt;overall&lt;/strong&gt; coverage for our code base?&lt;/p&gt;

&lt;h4 id=&#34;toc_1&#34;&gt;Generating cover profiles&lt;/h4&gt;

&lt;p&gt;Let&amp;rsquo;s consider some possible go test commands with &lt;code&gt;-coveprofile&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;go test -coverprofile=cover.out pkg2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;tests run only for &lt;code&gt;pkg1&lt;/code&gt; and cover profile generated only for pkg2&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;go test -coverprofile=cover.out -coverpkg=./... pkg2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;tests run only for &lt;code&gt;pkg2&lt;/code&gt; and cover profile generated for all packages&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;go test -coverprofile=cover.out -coverpkg=./... ./...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;boo hoo: &lt;code&gt;cannot use test profile flag with multiple packages&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;So, what we can do for running tests on all packages and get cover profile
for all packages?&lt;/p&gt;

&lt;h4 id=&#34;toc_2&#34;&gt;Merging cover profiles&lt;/h4&gt;

&lt;p&gt;Now we able to get overall profile for each package individually.
It seems that we can merge this files. Profile file has next structure,
according to
&lt;a href=&#34;https://code.google.com/p/go/source/browse/cover/profile.go?repo=tools&#34;&gt;cover code&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// First line is &amp;quot;mode: foo&amp;quot;, where foo is &amp;quot;set&amp;quot;, &amp;quot;count&amp;quot;, or &amp;quot;atomic&amp;quot;.
// Rest of file is in the format
//      encoding/base64/base64.go:34.44,37.40 3 1
// where the fields are: name.go:line.column,line.column numberOfStatements count
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So, using magic of &lt;code&gt;awk&lt;/code&gt; I found next solution to this problem:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;go test -coverprofile=pkg1.cover.out -coverpkg=./... pkg1
go test -coverprofile=pkg11.cover.out -coverpkg=./... pkg1/pkg11
go test -coverprofile=pkg12.cover.out -coverpkg=./... pkg1/pkg12
go test -coverprofile=pkg2.cover.out -coverpkg=./... pkg2
go test -coverprofile=pkg21.cover.out -coverpkg=./... pkg2/pkg21
go test -coverprofile=pkg22.cover.out -coverpkg=./... pkg2/pkg22
echo &amp;quot;mode: set&amp;quot; &amp;gt; coverage.out &amp;amp;&amp;amp; cat *.cover.out | grep -v mode: | sort -r | \
awk &#39;{if($1 != last) {print $0;last=$1}}&#39; &amp;gt;&amp;gt; coverage.out
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The true meaning of last line I leave as an exercise for user :)
Now we have profile for all code, that was executed by all tests. We can use
this merged profile &lt;code&gt;coverage.out&lt;/code&gt; for go cover tool:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;go tool cover -html=coverage.out
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or for generating &lt;a href=&#34;https://github.com/t-yuki/gocover-cobertura&#34;&gt;cobertura report&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gocover-cobertura &amp;lt; coverage.txt &amp;gt; coverage.xml
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;toc_3&#34;&gt;Conclusion&lt;/h4&gt;

&lt;p&gt;Of course this solution is only workaround. And it works only for &lt;code&gt;mode: set&lt;/code&gt;.
Similar logic must be embedded to cover tool. I am really hope that one day we
will be able to run&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;go test -coverprofile=cover.out -coverpkg=./... ./...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and leaning back in chair, enjoying perfect cover profiles.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>