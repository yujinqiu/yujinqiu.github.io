<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Docker on Engineer&#39;s Draft </title>
      <generator uri="https://hugo.spf13.com">Hugo</generator>
    <link>http://yujinqiu.github.io/categories/docker/index.xml/</link>
    
    
    
    <updated>Wed, 11 Jun 2014 00:00:00 UTC</updated>
    
    <item>
      <title>30 days of hacking Docker</title>
      <link>http://yujinqiu.github.io/posts/streak/</link>
      <pubDate>Wed, 11 Jun 2014 00:00:00 UTC</pubDate>
      
      <guid>http://yujinqiu.github.io/posts/streak/</guid>
      <description>

&lt;h3 id=&#34;toc_0&#34;&gt;Prelude&lt;/h3&gt;

&lt;p&gt;Yesterday I finished my first 30-day &lt;a href=&#34;https://github.com/LK4D4&#34;&gt;streak&lt;/a&gt; on GitHub.
Most of contributions were to &lt;a href=&#34;https://github.com/dotcloud/docker&#34;&gt;Docker&lt;/a&gt; &amp;ndash;
the biggest opensource project on Go. I learned a lot in this month, and it was
really cool. I think that this is mostly because of Go language. I&amp;rsquo;ve been
programming on Python for five years and I was never so excited about open source,
because Python is not even half so fun as Go.&lt;/p&gt;

&lt;h3 id=&#34;toc_1&#34;&gt;1. Tools&lt;/h3&gt;

&lt;p&gt;There are a lot of tools for go, some of them just are &amp;ldquo;must have&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://godoc.org/code.google.com/p/go.tools/cmd/goimports&#34;&gt;Goimports&lt;/a&gt; - like
&lt;code&gt;go fmt&lt;/code&gt; but with cool imports handling, I really think that &lt;code&gt;go fmt&lt;/code&gt; needs to
be replaced with &lt;code&gt;Goimports&lt;/code&gt; in future Go versions.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://godoc.org/code.google.com/p/go.tools/cmd/vet&#34;&gt;Vet&lt;/a&gt; - analyzes code for
some suspicious constructs. You can find with it: bad format strings, unreachable
code, passing mutex by value and etc.
&lt;a href=&#34;https://github.com/dotcloud/docker/pull/6269&#34;&gt;PR about vet erros in Docker&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/golang/lint&#34;&gt;Golint&lt;/a&gt; - checks code for
&lt;a href=&#34;https://code.google.com/p/go-wiki/wiki/CodeReviewComments&#34;&gt;google style guide&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;toc_2&#34;&gt;2. Editor&lt;/h3&gt;

&lt;p&gt;I love my awesome vim with awesome &lt;a href=&#34;https://github.com/fatih/vim-go&#34;&gt;vim-go&lt;/a&gt; plugin,
which is integrated with tools mentioned above.
It formats code for me, adds needed imports, removes unused imports, shows
documentation, supports tagbar and more. And my favourite - go to definition. I
really suffered without it :) With vim-go my development rate became faster
than I could imagine. You can see my config in my dotfiles
&lt;a href=&#34;https://github.com/LK4D4/dotfiles&#34;&gt;repo&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;toc_3&#34;&gt;3. Race detector&lt;/h3&gt;

&lt;p&gt;This is one of the most important and one of the most underestimated thing.
Very useful and very easy to use. You can find description and examples
&lt;a href=&#34;http://blog.golang.org/race-detector&#34;&gt;here&lt;/a&gt;. I&amp;rsquo;ve found many race conditions
with this tool (&lt;a href=&#34;https://github.com/dotcloud/docker/pull/6118&#34;&gt;#1&lt;/a&gt;,
&lt;a href=&#34;https://github.com/dotcloud/docker/pull/6150&#34;&gt;#2&lt;/a&gt;,
&lt;a href=&#34;https://github.com/dotcloud/docker/pull/6214&#34;&gt;#3&lt;/a&gt;,
&lt;a href=&#34;https://github.com/dotcloud/docker/pull/6232&#34;&gt;#4&lt;/a&gt;,
&lt;a href=&#34;https://github.com/gorilla/context/pull/14&#34;&gt;#5&lt;/a&gt;).&lt;/p&gt;

&lt;h3 id=&#34;toc_4&#34;&gt;4. Docker specific&lt;/h3&gt;

&lt;p&gt;Docker has very smart and friendly community. You can always ask for help about
hacking in #docker-dev on Freenode. But I&amp;rsquo;ll describe some simple tasks that appears
when you try to hack docker first time.&lt;/p&gt;

&lt;h4 id=&#34;toc_5&#34;&gt;Tests&lt;/h4&gt;

&lt;p&gt;There are three kinds of tests in docker repo:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;unit&lt;/code&gt; - unit tests(ah, we all know what unit tests are, right?). These tests
spreaded all over repository and can be run by &lt;code&gt;make test-unit&lt;/code&gt;. You can run
tests for one directory, specifying it in &lt;code&gt;TESTDIRS&lt;/code&gt; variable. For example&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;TESTDIRS=&amp;quot;daemon&amp;quot; make test-unit
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;will run tests only for daemon directory.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;integration-cli&lt;/code&gt; - integration tests, that use external docker commands
(for example &lt;code&gt;docker build&lt;/code&gt;, &lt;code&gt;docker run&lt;/code&gt;, etc.). It is very easy to write this
kind of tests and you should do it if you think that your changes can change
Docker&amp;rsquo;s behavior from client&amp;rsquo;s point of view. These tests are located in &lt;code&gt;integration-cli&lt;/code&gt;
directory and can be run by &lt;code&gt;make test-integration-cli&lt;/code&gt;. You can run one or more
specific tests with setting &lt;code&gt;TESTFLAGS&lt;/code&gt; variable. For example&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;TESTFLAGS=&amp;quot;-run TestBuild&amp;quot; make test-integration-cli
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;will run all tests whose names starts with &lt;code&gt;TestBuild&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;integration&lt;/code&gt; - integration tests, that use internal docker datastructures.
It is deprecated now, so if you want to write tests you should prefer
&lt;code&gt;integration-cli&lt;/code&gt; or &lt;code&gt;unit&lt;/code&gt;. These tests are located in &lt;code&gt;integration&lt;/code&gt; directory and
can be run by &lt;code&gt;make test-integration&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All tests can be run by &lt;code&gt;make test&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;toc_6&#34;&gt;Build and run tests on host&lt;/h4&gt;

&lt;p&gt;All &lt;code&gt;make&lt;/code&gt; commands execute in docker container, it can be pretty annoying to
build container just for running unit tests for example.&lt;/p&gt;

&lt;p&gt;So, for running unit test on host machine you need canonical Go
&lt;a href=&#34;http://golang.org/doc/code.html#Workspaces&#34;&gt;workspace&lt;/a&gt;. When it&amp;rsquo;s ready you can
just do symlink to docker repo in &lt;code&gt;src/github.com/dotcloud/docker&lt;/code&gt;. But we still
need right &lt;code&gt;$GOPATH&lt;/code&gt;, here is the trick:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;export GOPATH=&amp;lt;workspace&amp;gt;/src/github.com/dotcloud/docker/vendor:&amp;lt;workspace&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And then, for example you can run:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;go test github.com/dotcloud/docker/daemon/networkdriver/ipallocator
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Some tests require external libs for example &lt;code&gt;libdevmapper&lt;/code&gt;, you can disable
it with &lt;code&gt;DOCKER_BUILDTAGS&lt;/code&gt; environment variable. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;export DOCKER_BUILDTAGS=&#39;exclude_graphdriver_devicemapper exclude_graphdriver_aufs&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For fast building dynamic binary you can use this snippet in docker repo:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;export AUTO_GOPATH=1
export DOCKER_BUILDTAGS=&#39;exclude_graphdriver_devicemapper exclude_graphdriver_aufs&#39;
hack/make.sh dynbinary
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I use that &lt;code&gt;DOCKER_BUILDTAGS&lt;/code&gt; for my &lt;code&gt;btrfs&lt;/code&gt; system, so if you use &lt;code&gt;aufs&lt;/code&gt; or
&lt;code&gt;devicemapper&lt;/code&gt; you should change it for your driver.&lt;/p&gt;

&lt;h4 id=&#34;toc_7&#34;&gt;Race detection&lt;/h4&gt;

&lt;p&gt;To enable race detection in docker I&amp;rsquo;m using patch:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;diff --git a/hack/make/binary b/hack/make/binary
index b97069a..74b202d 100755
--- a/hack/make/binary
+++ b/hack/make/binary
@@ -6,6 +6,7 @@ DEST=$1
 go build \
        -o &amp;quot;$DEST/docker-$VERSION&amp;quot; \
        &amp;quot;${BUILDFLAGS[@]}&amp;quot; \
+       -race \
        -ldflags &amp;quot;
                $LDFLAGS
                $LDFLAGS_STATIC_DOCKER
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After that all binaries will be with race detection. Note that this will slow
docker a lot.&lt;/p&gt;

&lt;h4 id=&#34;toc_8&#34;&gt;Docker-stress&lt;/h4&gt;

&lt;p&gt;There is amazing
&lt;a href=&#34;https://github.com/spotify/docker-stress&#34;&gt;docker-stress&lt;/a&gt; from Spotify for
Docker load testing. Usage is pretty straightforward:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;./docker-stress -c 50 -t 5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here 50 clients are trying to run containers, which will alive for five seconds.
&lt;code&gt;docker-stress&lt;/code&gt; uses only &lt;code&gt;docker run&lt;/code&gt; jobs for testing, so I prefer also to run in
parallel sort of:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker events
while true; do docker inspect $(docker ps -lq); done
while true; do docker build -t test test; done
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and so on.&lt;/p&gt;

&lt;h4 id=&#34;toc_9&#34;&gt;Useful links&lt;/h4&gt;

&lt;p&gt;You definitely need to read
&lt;a href=&#34;https://github.com/dotcloud/docker/blob/master/CONTRIBUTING.md&#34;&gt;Contributing to Docker&lt;/a&gt;
and &lt;a href=&#34;https://github.com/dotcloud/docker/blob/master/docs/sources/contributing/devenvironment.md&#34;&gt;Setting Up a Dev Environment&lt;/a&gt;.
I really don&amp;rsquo;t think that something else is needed for Docker hacking start.&lt;/p&gt;

&lt;h3 id=&#34;toc_10&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;This is all that I wanted to tell you about my first big opensource experience.
Also, just today Docker folks launched some
&lt;a href=&#34;https://github.com/docker&#34;&gt;new projects&lt;/a&gt; and I am very excited about it.
So, I want to invite you all to the magical world of Go, Opensource and,
of course, Docker.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Deploying blog with docker and hugo</title>
      <link>http://yujinqiu.github.io/posts/hugoblog/</link>
      <pubDate>Sun, 04 May 2014 00:00:00 UTC</pubDate>
      
      <guid>http://yujinqiu.github.io/posts/hugoblog/</guid>
      <description>

&lt;h4 id=&#34;toc_0&#34;&gt;Prelude&lt;/h4&gt;

&lt;p&gt;Recently I moved my jabber-server to DigitalOcean VPS. Run Prosody in docker was
so easy, that I decided create this blog. And of course deploy it with docker!&lt;/p&gt;

&lt;h4 id=&#34;toc_1&#34;&gt;Content&lt;/h4&gt;

&lt;p&gt;At first we need container with templates and content for blog generation.
I used next dockerfile:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;FROM debian:jessie

RUN apt-get update &amp;amp;&amp;amp; apt-get install --no-install-recommends -y ca-certificates git-core
RUN git clone http://github.com/LK4D4/lk4d4.darth.io.git /src
VOLUME [&amp;quot;/src&amp;quot;]
WORKDIR /src
ENTRYPOINT [&amp;quot;git&amp;quot;]
CMD [&amp;quot;pull&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There is no magic here: just clone repo to &lt;code&gt;/src&lt;/code&gt; (it will be used below),
and update it on container start.&lt;/p&gt;

&lt;p&gt;Build image:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker build -t blog/content .
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Create data container:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker run --name blog_content blog/content
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For updating content and templates from github we need just:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker start blog_content
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;toc_2&#34;&gt;Hugo&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;http://hugo.spf13.com&#34;&gt;Hugo&lt;/a&gt; &amp;ndash; very fast static site generator, written in Go (so
many cool things written in Go btw).&lt;/p&gt;

&lt;p&gt;Idea is to run hugo in docker container so it reads contents from one directory
and writes generated blog to another.&lt;/p&gt;

&lt;p&gt;Hugo dockerfile:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;FROM crosbymichael/golang

RUN apt-get update &amp;amp;&amp;amp; apt-get install --no-install-recommends -y bzr

RUN go get github.com/spf13/hugo

VOLUME [&amp;quot;/var/www/blog&amp;quot;]

ENTRYPOINT [&amp;quot;hugo&amp;quot;]
CMD [&amp;quot;-w&amp;quot;, &amp;quot;-s&amp;quot;, &amp;quot;/src&amp;quot;, &amp;quot;-d&amp;quot;, &amp;quot;/var/www/blog&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So, here we &lt;code&gt;go get&lt;/code&gt; hugo and use /src(remember this from content container?)
as source directory for it and &lt;code&gt;/var/www/blog&lt;/code&gt; as destination.&lt;/p&gt;

&lt;p&gt;Now build image and run container with hugo:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker build -t blog/rendered .
docker run --name blog --volumes-from blog_content blog/rendered
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here the trick with
&lt;a href=&#34;http://docs.docker.io/use/working_with_volumes/&#34;&gt;&lt;code&gt;--volumes-from&lt;/code&gt;&lt;/a&gt; &amp;ndash; we used
&lt;code&gt;/src&lt;/code&gt; from &lt;code&gt;blog_content&lt;/code&gt; container, and yeah, we&amp;rsquo;re going to use
&lt;code&gt;/var/www/blog&lt;/code&gt; from &lt;code&gt;blog&lt;/code&gt; container.&lt;/p&gt;

&lt;h4 id=&#34;toc_3&#34;&gt;Nginx&lt;/h4&gt;

&lt;p&gt;So, now we have container with templates and content &lt;code&gt;blog_content&lt;/code&gt;, content
with ready to use blog &lt;code&gt;blog&lt;/code&gt;, it&amp;rsquo;s time to show this blog to the world.&lt;/p&gt;

&lt;p&gt;I write simple config for nginx:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;server {
    listen 80;
    server_name lk4d4.darth.io;
    location / {
        root /var/www/blog;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Put it to sites-enabled directory, which used in this pretty dockerfile:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;FROM dockerfile/nginx

ADD sites-enabled/ /etc/nginx/sites-enabled
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Build image and run container with nginx:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker build -t nginx .
docker run -p 80:80 -d --name=nginx --volumes-from=blog nginx
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;rsquo;s it, now blog is running on &lt;a href=&#34;http://lk4d4.darth.io&#34;&gt;lk4d4.darth.io&lt;/a&gt; and
you can read it :) I can update it just with &lt;code&gt;docker start blog_content&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;toc_4&#34;&gt;Conclusions&lt;/h4&gt;

&lt;p&gt;It&amp;rsquo;s really fun to use docker. You don&amp;rsquo;t need to install and remove
tons of crap on host machine, docker can handle it all for you.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.docker.io/static/img/homepage-docker-logo.png&#34; alt=&#34;docker&#34; /&gt;
&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>